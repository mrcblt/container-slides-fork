---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: otelcontribcol
  name: otelcontribcol
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: otelcontribcol
  labels:
    app: otelcontribcol
rules:
  - apiGroups:
      - ""
    resources:
      - events
      - namespaces
      - namespaces/status
      - nodes
      - nodes/spec
      - nodes/stats
      - nodes/proxy
      - pods
      - pods/status
      - replicationcontrollers
      - replicationcontrollers/status
      - resourcequotas
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - daemonsets
      - deployments
      - replicasets
      - statefulsets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - daemonsets
      - deployments
      - replicasets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - batch
    resources:
      - jobs
      - cronjobs
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - autoscaling
    resources:
      - horizontalpodautoscalers
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: otelcontribcol
  labels:
    app: otelcontribcol
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: otelcontribcol
subjects:
  - kind: ServiceAccount
    name: otelcontribcol
    namespace: kube-system
---
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: simplest
spec:
  image: otel/opentelemetry-collector-contrib:latest
  serviceAccount: otelcontribcol
  mode: daemonset
  hostNetwork: true
  ports:
    - name: metric
      port: 9090
      targetPort: 9090
      protocol: TCP
  env:
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  volumes:
    - name: pods
      hostPath:
        path: /var/log/pods
  volumeMounts:
    - mountPath: /var/log/pods
      name: pods
      readOnly: true
  tolerations:
  - effect: NoSchedule
    key: node-role.kubernetes.io/master
    operator: Equal
  - effect: NoSchedule
    key: node-role.kubernetes.io/control-plane
    operator: Equal
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  config: |
    receivers:
      otlp:
        protocols:
          grpc:
          http:
      hostmetrics:
          collection_interval: 30s
          scrapers:
            cpu:
            memory:
            load:
              cpu_average: true
      k8s_cluster:
        collection_interval: 10s
        node_conditions_to_report: [Ready, MemoryPressure,DiskPressure,NetworkUnavailable]
        allocatable_types_to_report: [cpu, memory,storage]
      k8s_events:
        auth_type : serviceAccount
      receiver_creator:
         watch_observers: [k8s_observer]
         receivers:
            kubeletstats:
              rule: type == "k8s.node"
              config:
                collection_interval: 10s
                auth_type: serviceAccount
                endpoint: "`endpoint`:`kubelet_endpoint_port`"
                insecure_skip_verify: true
                extra_metadata_labels:
                  - container.id
                  - k8s.volume.type
                metric_groups:
                  - node
                  - pod
                  - volume
                  - container
      filelog:
        include: [ /var/log/pods/*/*/*.log ]
        start_at: end
        include_file_path: true
        include_file_name: false
        exclude:
          # Exclude logs from all containers named otel-collector
          - /var/log/pods/*/otc-container/*.log
        operators:
        - id: get-format
          routes:
          - expr: body matches "^[^ Z]+Z"
            output: parser-containerd
          type: router
        - id: parser-containerd
          output: extract_metadata_from_filepath
          regex: ^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
          timestamp:
            layout: '%Y-%m-%dT%H:%M:%S.%LZ'
            parse_from: attributes.time
          type: regex_parser
        - id: extract_metadata_from_filepath
          parse_from: attributes["log.file.path"]
          regex: ^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]+)\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$
          type: regex_parser
        - from: attributes.container_name
          to: resource["k8s.container.name"]
          type: move
        - from: attributes.namespace
          to: resource["k8s.namespace.name"]
          type: move
        - from: attributes.pod_name
          to: resource["k8s.pod.name"]
          type: move
        - from: attributes.restart_count
          to: resource["k8s.container.restart_count"]
          type: move
        - from: attributes.uid
          to: resource["k8s.pod.uid"]
          type: move
        - from: attributes.log
          to: body
          type: move
    exporters:
      otlphttp:
        endpoint: http://tempo:4318
      prometheus:
        endpoint: "0.0.0.0:9090"
        metric_expiration: 180m
        resource_to_telemetry_conversion:
          enabled: true
      logging:
        loglevel: debug
      loki:
        endpoint: http://loki:3100/loki/api/v1/push
        tenant_id: "fake"
        labels:
          attributes:
            log.file.name: "filename"
            k8s.event.reason: "k8s_event_reason"
            k8s.event.action: "k8s_event_action"
            k8s.event.start_time: "k8s_event_start_time"
            k8s.event.name: "k8s_event_name"
            k8s.event.uid: "k8s_event_uid"
            k8s.namespace.name: "k8s_namespace_name"
            k8s.event.count: "k8s_event_count"
          resource:
            k8s.namespace.name: "namespace"
            k8s.container.name: "container"
            k8s.pod.name: "pod"
            k8s.pod.uid: "pod_uuid"
          record:
            traceID: "traceid"
    processors:
      batch: {}
      memory_limiter:
        check_interval: 5s
        limit_mib: 409
        spike_limit_mib: 128
      k8sattributes:
        auth_type: serviceAccount
        passthrough: true
        filter:
          node_from_env_var: K8S_NODE_NAME
        extract:
          metadata:
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.start_time    
    extensions:
      memory_ballast:
        size_in_percentage: 20
      k8s_observer:
        auth_type: serviceAccount
        node: ${K8S_NODE_NAME}
        observe_pods: true
        observe_nodes: true
    service:
      extensions:
      - k8s_observer
      - memory_ballast
      pipelines:
        traces:
          receivers:
          - otlp
          processors:
          - memory_limiter
          - batch
          - k8sattributes
          exporters:
          - otlphttp
          - logging
        logs:
          receivers:
          - filelog
          - k8s_events
          processors:
          - memory_limiter
          - batch
          - k8sattributes
          exporters:
          - loki
        #metrics:
        #  receivers:
        #  - k8s_cluster
        #  - receiver_creator
        #  processors:
        #  - memory_limiter
        #  - batch
        #  - k8sattributes
        #  exporters:
        #  - prometheus